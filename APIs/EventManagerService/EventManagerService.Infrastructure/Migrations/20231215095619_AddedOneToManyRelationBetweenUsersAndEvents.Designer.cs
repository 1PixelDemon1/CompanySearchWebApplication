// <auto-generated />
using System;
using EventManagerService.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EventManagerService.Infrastructure.Migrations
{
    [DbContext(typeof(EventManagerDbContext))]
    [Migration("20231215095619_AddedOneToManyRelationBetweenUsersAndEvents")]
    partial class AddedOneToManyRelationBetweenUsersAndEvents
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BaseEventEventCategory", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer");

                    b.Property<int>("EventsId")
                        .HasColumnType("integer");

                    b.HasKey("CategoriesId", "EventsId");

                    b.HasIndex("EventsId");

                    b.ToTable("BaseEventEventCategory");
                });

            modelBuilder.Entity("BaseEventUser", b =>
                {
                    b.Property<int>("RegisteredUsersId")
                        .HasColumnType("integer");

                    b.Property<int>("SignedEventsId")
                        .HasColumnType("integer");

                    b.HasKey("RegisteredUsersId", "SignedEventsId");

                    b.HasIndex("SignedEventsId");

                    b.ToTable("BaseEventUser");
                });

            modelBuilder.Entity("EventManagerService.Domain.Entities.BaseEntities.BaseEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeadLine")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EventDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan?>("EventDuration")
                        .HasColumnType("interval");

                    b.Property<int>("GenderRules")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("MaxAge")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxUsers")
                        .HasColumnType("integer");

                    b.Property<int?>("MinAge")
                        .HasColumnType("integer");

                    b.Property<int?>("MinUsers")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("BaseEvent");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("EventManagerService.Domain.Entities.CommercialUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PersonalAccount")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CommercialUsers", (string)null);
                });

            modelBuilder.Entity("EventManagerService.Domain.Entities.EventCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("EventCategories");
                });

            modelBuilder.Entity("EventManagerService.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<int>("MyProperty")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("EventManagerService.Domain.Entities.CommercialEvent", b =>
                {
                    b.HasBaseType("EventManagerService.Domain.Entities.BaseEntities.BaseEvent");

                    b.Property<int?>("CommercialEventId")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int?>("UserEventId")
                        .HasColumnType("integer");

                    b.HasIndex("CommercialEventId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UserEventId");

                    b.ToTable("CommercialEvents", (string)null);
                });

            modelBuilder.Entity("EventManagerService.Domain.Entities.UserEvent", b =>
                {
                    b.HasBaseType("EventManagerService.Domain.Entities.BaseEntities.BaseEvent");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserEventId")
                        .HasColumnType("integer");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UserEventId");

                    b.ToTable("UserEvents", (string)null);
                });

            modelBuilder.Entity("BaseEventEventCategory", b =>
                {
                    b.HasOne("EventManagerService.Domain.Entities.EventCategory", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventManagerService.Domain.Entities.BaseEntities.BaseEvent", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BaseEventUser", b =>
                {
                    b.HasOne("EventManagerService.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("RegisteredUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventManagerService.Domain.Entities.BaseEntities.BaseEvent", null)
                        .WithMany()
                        .HasForeignKey("SignedEventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventManagerService.Domain.Entities.EventCategory", b =>
                {
                    b.HasOne("EventManagerService.Domain.Entities.EventCategory", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("EventManagerService.Domain.Entities.CommercialEvent", b =>
                {
                    b.HasOne("EventManagerService.Domain.Entities.CommercialEvent", null)
                        .WithMany("CommercialEvents")
                        .HasForeignKey("CommercialEventId");

                    b.HasOne("EventManagerService.Domain.Entities.CommercialUser", "Creator")
                        .WithMany("CommercialEvents")
                        .HasForeignKey("CreatorId");

                    b.HasOne("EventManagerService.Domain.Entities.BaseEntities.BaseEvent", null)
                        .WithOne()
                        .HasForeignKey("EventManagerService.Domain.Entities.CommercialEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventManagerService.Domain.Entities.UserEvent", null)
                        .WithMany("CommercialEvents")
                        .HasForeignKey("UserEventId");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("EventManagerService.Domain.Entities.UserEvent", b =>
                {
                    b.HasOne("EventManagerService.Domain.Entities.User", "Creator")
                        .WithMany("UserEvents")
                        .HasForeignKey("CreatorId");

                    b.HasOne("EventManagerService.Domain.Entities.BaseEntities.BaseEvent", null)
                        .WithOne()
                        .HasForeignKey("EventManagerService.Domain.Entities.UserEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventManagerService.Domain.Entities.UserEvent", null)
                        .WithMany("UserEvents")
                        .HasForeignKey("UserEventId");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("EventManagerService.Domain.Entities.CommercialUser", b =>
                {
                    b.Navigation("CommercialEvents");
                });

            modelBuilder.Entity("EventManagerService.Domain.Entities.User", b =>
                {
                    b.Navigation("UserEvents");
                });

            modelBuilder.Entity("EventManagerService.Domain.Entities.CommercialEvent", b =>
                {
                    b.Navigation("CommercialEvents");
                });

            modelBuilder.Entity("EventManagerService.Domain.Entities.UserEvent", b =>
                {
                    b.Navigation("CommercialEvents");

                    b.Navigation("UserEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
