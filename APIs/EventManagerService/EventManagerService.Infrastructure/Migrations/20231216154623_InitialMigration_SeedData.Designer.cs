// <auto-generated />
using System;
using EventManagerService.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EventManagerService.Infrastructure.Migrations
{
    [DbContext(typeof(EventManagerDbContext))]
    [Migration("20231216154623_InitialMigration_SeedData")]
    partial class InitialMigration_SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BaseEventEventCategory", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer");

                    b.Property<int>("EventsId")
                        .HasColumnType("integer");

                    b.HasKey("CategoriesId", "EventsId");

                    b.HasIndex("EventsId");

                    b.ToTable("BaseEventEventCategory");
                });

            modelBuilder.Entity("BaseEventUser", b =>
                {
                    b.Property<int>("RegisteredUsersId")
                        .HasColumnType("integer");

                    b.Property<int>("SignedEventsId")
                        .HasColumnType("integer");

                    b.HasKey("RegisteredUsersId", "SignedEventsId");

                    b.HasIndex("SignedEventsId");

                    b.ToTable("BaseEventUser");
                });

            modelBuilder.Entity("EventManagerService.Domain.Entities.BaseEntities.BaseEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeadLine")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EventDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan?>("EventDuration")
                        .HasColumnType("interval");

                    b.Property<int>("GenderRules")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("MaxAge")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxUsers")
                        .HasColumnType("integer");

                    b.Property<int?>("MinAge")
                        .HasColumnType("integer");

                    b.Property<int?>("MinUsers")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("BaseEvent");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("EventManagerService.Domain.Entities.CommercialUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PersonalAccount")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CommercialUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 5,
                            Name = "VIMers corp",
                            PersonalAccount = "70ББ000584"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Банк Пеньков",
                            PersonalAccount = "70ББ000585"
                        });
                });

            modelBuilder.Entity("EventManagerService.Domain.Entities.EventCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("EventCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Фестиваль"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Фестиваль волонтеров",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Концерт"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Праздничный концерт",
                            ParentCategoryId = 3
                        },
                        new
                        {
                            Id = 5,
                            Name = "Поход в кино"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Конференция"
                        });
                });

            modelBuilder.Entity("EventManagerService.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<int>("MyProperty")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 21,
                            Email = "testmail@gmail.com",
                            Gender = 0,
                            MyProperty = 0,
                            Name = "Анатолий",
                            PhoneNumber = "+71234567890"
                        },
                        new
                        {
                            Id = 2,
                            Age = 45,
                            Email = "testmail1@gmail.com",
                            Gender = 0,
                            MyProperty = 0,
                            Name = "Евгений",
                            PhoneNumber = "+71234567891"
                        },
                        new
                        {
                            Id = 3,
                            Age = 32,
                            Email = "testmail2@gmail.com",
                            Gender = 1,
                            MyProperty = 0,
                            Name = "Анастасия",
                            PhoneNumber = "+71234567892"
                        },
                        new
                        {
                            Id = 4,
                            Age = 15,
                            Email = "testmail3@gmail.com",
                            Gender = 1,
                            MyProperty = 0,
                            Name = "Валентина",
                            PhoneNumber = "+71234567893"
                        });
                });

            modelBuilder.Entity("EventManagerService.Domain.Entities.CommercialEvent", b =>
                {
                    b.HasBaseType("EventManagerService.Domain.Entities.BaseEntities.BaseEvent");

                    b.Property<int?>("CommercialEventId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int?>("UserEventId")
                        .HasColumnType("integer");

                    b.HasIndex("CommercialEventId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UserEventId");

                    b.ToTable("CommercialEvents", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 3,
                            CreateTime = new DateTime(2023, 12, 16, 20, 46, 23, 120, DateTimeKind.Local).AddTicks(1825),
                            DeadLine = new DateTime(2023, 12, 21, 20, 46, 23, 120, DateTimeKind.Local).AddTicks(1826),
                            Description = "Проведение публичной конференции",
                            EventDateTime = new DateTime(2023, 12, 22, 20, 46, 23, 120, DateTimeKind.Local).AddTicks(1826),
                            EventDuration = new TimeSpan(0, 2, 0, 0, 0),
                            GenderRules = 0,
                            Location = "г.Магнитогорск пр.Ленина д.130",
                            MaxAge = -1,
                            MaxUsers = -1,
                            MinAge = 18,
                            MinUsers = 20,
                            UpdateTime = new DateTime(2023, 12, 16, 20, 46, 23, 120, DateTimeKind.Local).AddTicks(1825),
                            CreatorId = 5,
                            Price = 0m
                        },
                        new
                        {
                            Id = 4,
                            CreateTime = new DateTime(2023, 12, 16, 20, 46, 23, 120, DateTimeKind.Local).AddTicks(1830),
                            DeadLine = new DateTime(2023, 12, 31, 20, 46, 23, 120, DateTimeKind.Local).AddTicks(1831),
                            Description = "Проведение IT - конференции",
                            EventDateTime = new DateTime(2024, 1, 1, 20, 46, 23, 120, DateTimeKind.Local).AddTicks(1831),
                            EventDuration = new TimeSpan(0, 2, 30, 0, 0),
                            GenderRules = 0,
                            Location = "г.Магнитогорск пр.Ленина д.130",
                            MaxAge = -1,
                            MaxUsers = -1,
                            MinAge = 18,
                            MinUsers = 0,
                            UpdateTime = new DateTime(2023, 12, 16, 20, 46, 23, 120, DateTimeKind.Local).AddTicks(1830),
                            CreatorId = 6,
                            Price = 0m
                        });
                });

            modelBuilder.Entity("EventManagerService.Domain.Entities.UserEvent", b =>
                {
                    b.HasBaseType("EventManagerService.Domain.Entities.BaseEntities.BaseEvent");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserEventId")
                        .HasColumnType("integer");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UserEventId");

                    b.ToTable("UserEvents", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateTime = new DateTime(2023, 12, 16, 20, 46, 23, 120, DateTimeKind.Local).AddTicks(1783),
                            DeadLine = new DateTime(2023, 12, 26, 20, 46, 23, 120, DateTimeKind.Local).AddTicks(1792),
                            Description = "Посещение кинотеатра Джаз.Синема для просмотра фильма \"Человек паук 6\"",
                            EventDateTime = new DateTime(2023, 12, 27, 20, 46, 23, 120, DateTimeKind.Local).AddTicks(1797),
                            EventDuration = new TimeSpan(0, 2, 56, 0, 0),
                            GenderRules = 0,
                            Location = "г.Магнитогорск ул.Герцена д.6",
                            MaxAge = -1,
                            MaxUsers = 80,
                            MinAge = 16,
                            MinUsers = 1,
                            UpdateTime = new DateTime(2023, 12, 16, 20, 46, 23, 120, DateTimeKind.Local).AddTicks(1792),
                            CreatorId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreateTime = new DateTime(2023, 12, 16, 20, 46, 23, 120, DateTimeKind.Local).AddTicks(1804),
                            DeadLine = new DateTime(2023, 12, 26, 20, 46, 23, 120, DateTimeKind.Local).AddTicks(1805),
                            Description = "Посещение кинотеатра Джаз.Синема для просмотра фильма \"Человек паук 6\", посещение фестиваля после",
                            EventDateTime = new DateTime(2023, 12, 27, 20, 46, 23, 120, DateTimeKind.Local).AddTicks(1806),
                            EventDuration = new TimeSpan(0, 9, 36, 0, 0),
                            GenderRules = 0,
                            Location = "г.Магнитогорск пр.Ленина д.72",
                            MaxAge = -1,
                            MaxUsers = 80,
                            MinAge = 16,
                            MinUsers = 1,
                            UpdateTime = new DateTime(2023, 12, 16, 20, 46, 23, 120, DateTimeKind.Local).AddTicks(1805),
                            CreatorId = 3
                        });
                });

            modelBuilder.Entity("BaseEventEventCategory", b =>
                {
                    b.HasOne("EventManagerService.Domain.Entities.EventCategory", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventManagerService.Domain.Entities.BaseEntities.BaseEvent", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BaseEventUser", b =>
                {
                    b.HasOne("EventManagerService.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("RegisteredUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventManagerService.Domain.Entities.BaseEntities.BaseEvent", null)
                        .WithMany()
                        .HasForeignKey("SignedEventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventManagerService.Domain.Entities.EventCategory", b =>
                {
                    b.HasOne("EventManagerService.Domain.Entities.EventCategory", "ParentCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("EventManagerService.Domain.Entities.CommercialEvent", b =>
                {
                    b.HasOne("EventManagerService.Domain.Entities.CommercialEvent", null)
                        .WithMany("CommercialEvents")
                        .HasForeignKey("CommercialEventId");

                    b.HasOne("EventManagerService.Domain.Entities.CommercialUser", "Creator")
                        .WithMany("CommercialEvents")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventManagerService.Domain.Entities.BaseEntities.BaseEvent", null)
                        .WithOne()
                        .HasForeignKey("EventManagerService.Domain.Entities.CommercialEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventManagerService.Domain.Entities.UserEvent", null)
                        .WithMany("CommercialEvents")
                        .HasForeignKey("UserEventId");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("EventManagerService.Domain.Entities.UserEvent", b =>
                {
                    b.HasOne("EventManagerService.Domain.Entities.User", "Creator")
                        .WithMany("UserEvents")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventManagerService.Domain.Entities.BaseEntities.BaseEvent", null)
                        .WithOne()
                        .HasForeignKey("EventManagerService.Domain.Entities.UserEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventManagerService.Domain.Entities.UserEvent", null)
                        .WithMany("UserEvents")
                        .HasForeignKey("UserEventId");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("EventManagerService.Domain.Entities.CommercialUser", b =>
                {
                    b.Navigation("CommercialEvents");
                });

            modelBuilder.Entity("EventManagerService.Domain.Entities.EventCategory", b =>
                {
                    b.Navigation("ChildCategories");
                });

            modelBuilder.Entity("EventManagerService.Domain.Entities.User", b =>
                {
                    b.Navigation("UserEvents");
                });

            modelBuilder.Entity("EventManagerService.Domain.Entities.CommercialEvent", b =>
                {
                    b.Navigation("CommercialEvents");
                });

            modelBuilder.Entity("EventManagerService.Domain.Entities.UserEvent", b =>
                {
                    b.Navigation("CommercialEvents");

                    b.Navigation("UserEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
